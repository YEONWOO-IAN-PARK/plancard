<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.junebay.plancard.plan.mapper.PlanMapper">

	<!-- 내 플랜 DTO 반환을 위한 ResultMap -->
	<resultMap id="myPlanDTOResultMap" type="com.junebay.plancard.plan.dto.PlanDTO">
		<id property="planId" column="plan_id" />
		<result property="title" column="title"/>
		<result property="startDate" column="start_date"/>
		<result property="endDate" column="end_date"/>
		<result property="duration" column="duration"/>
		<result property="visibility" column="visibility"/>
		<result property="likeCount" column="like_count"/>
		<result property="like" column="like"/>
		<result property="scrap" column="scrap"/>
		<result property="author" column="author"/>
		<result property="createdDate" column="created_date"/>
		<result property="lastUpdateDate" column="updated_date"/>
		<collection property="thumbnailCardList" ofType="com.junebay.plancard.card.dto.ThumbnailCardDTO" column="plan_id" javaType="ArrayList" select="selectThumbnailCardListByPlanId" />
	</resultMap>

	<!-- 탐험 플랜 DTO 반환을 위한 ResultMap -->
	<resultMap id="explorePlanDTOResultMap" type="com.junebay.plancard.plan.dto.PlanDTO">
		<id property="planId" column="plan_id" />
		<result property="visibility" column="visibility"/>
		<result property="title" column="title"/>
		<result property="likeCount" column="like_count"/>
		<result property="scrap" column="scrap"/>
		<result property="like" column="like"/>
		<result property="author" column="author"/>
		<result property="createdDate" column="created_date"/>
		<result property="lastUpdateDate" column="updated_date"/>
		<result property="startDate" column="start_date"/>
		<result property="endDate" column="end_date"/>
		<result property="duration" column="duration"/>
		<collection property="categoryList" ofType="com.junebay.plancard.plan.dto.ExplorePlanTagDTO" column="plan_id" javaType="ArrayList" select="selectCategoryListByPlanId" />
		<collection property="themeList" ofType="com.junebay.plancard.plan.dto.ExplorePlanTagDTO" column="plan_id" javaType="ArrayList" select="selectThemeListByPlanId" />
	</resultMap>

	<sql id="searchCondition">
		/* 검색 */
		<if test="searchDTO.search != null and searchDTO.search != ''">
			AND (
			    p.title LIKE CONCAT('%', #{searchDTO.search}, '%')
			)
		</if>
	</sql>

	<sql id="filterConditionForScrap">
		/* 필터: 스크랩 여부 */
		<if test="searchDTO.filter != null and searchDTO.filter.scrap != null">
		<choose>
			<when test="searchDTO.filter.scrap == true">
				AND ps.plan_id IS NOT NULL
			</when>
			<otherwise>
				AND ps.plan_id IS NULL
			</otherwise>
		</choose>
		</if>
	</sql>

	<sql id="filterConditionForLike">
		/* 필터: 좋아요 여부 */
		<if test="searchDTO.filter != null and searchDTO.filter.like != null">
		<choose>
			<when test="searchDTO.filter.like == true">
				AND pl.plan_id IS NOT NULL
			</when>
			<otherwise>
				AND pl.plan_id IS NULL
			</otherwise>
		</choose>
		</if>
	</sql>

	<sql id="filterConditionForCountry">
		/* 필터: 국가 */
		<if test='searchDTO.filter != null and searchDTO.filter.country != null and !"".equals(searchDTO.filter.country)'>
			AND SUM(country_id = #{searchDTO.filter.country}) > 0
		</if>
	</sql>

	<sql id="filterConditionForCity">
		/* 필터: 도시 */
		<if test='searchDTO.filter != null and searchDTO.filter.city != null and !"".equals(searchDTO.filter.city)'>
			AND SUM(city_id = #{searchDTO.filter.city}) > 0
		</if>
	</sql>

	<sql id="filterConditionForCategory">
		/* 필터: 카테고리 (배열) */
		<if test="searchDTO.filter != null and searchDTO.filter.category != null and searchDTO.filter.category.size() > 0">
			AND SUM(category_id IN
			<foreach item="categoryId" collection="searchDTO.filter.category" open="(" separator="," close=")">
				#{categoryId}
			</foreach>
			) > 0
		</if>
	</sql>
	<sql id="filterConditionForTheme">
		/* 필터: 테마 */
		<if test="searchDTO.filter != null and searchDTO.filter.theme != null and searchDTO.filter.theme.size() > 0">
			AND SUM(theme_id IN
			<foreach item="themeId" collection="searchDTO.filter.theme" open="(" separator="," close=")">
				#{themeId}
			</foreach>
			) > 0
		</if>
	</sql>

	<sql id="explorePlanCte">
		SELECT	p.id AS plan_id
				, p.visibility
				, p.title
				, p.like_count
				, p.start_date
				, p.end_date
				, u.name AS author
				, p.created_date
				, p.updated_date
				, DATEDIFF(end_date, start_date) + 1 AS duration
				, c.id AS card_id
				, ct.id AS city_id
				, ct.name AS city_name
				, co.id AS country_id
				, c.category_id
				, cth.theme_id
		FROM	plans p
				INNER JOIN plan_days pd ON pd.plan_id = p.id
				INNER JOIN plan_day_cards pdc ON pdc.plan_day_id = pd.id
				INNER JOIN cards c ON c.id = pdc.card_id
				INNER JOIN cities ct ON ct.id = c.city_id
				INNER JOIN countries co ON co.id = ct.country_id
				INNER JOIN categories cg ON cg.id = c.category_id
				INNER JOIN card_theme cth ON cth.card_id = c.id
				INNER JOIN users u ON u.id = p.author_id
		WHERE	p.visibility = 'public'
				AND c.is_active = true
				AND ct.is_active = true
				AND co.is_active = true
				AND cg.is_active = true
	            ANd u.is_active = true
				<include refid="searchCondition" />
	</sql>

	<insert id="insertMyPlan" useGeneratedKeys="true" keyProperty="planDTO.planId">
		INSERT INTO plans (title, start_date, end_date, user_id, author_id)
		VALUES (#{planDTO.title}, #{planDTO.startDate}, #{planDTO.endDate}, #{userId}, #{userId})
	</insert>

	<insert id="insertPlanDay" useGeneratedKeys="true" keyProperty="planDayDTO.planDayId">
		INSERT INTO plan_days (plan_id, title, travel_date, author_id)
		VALUES (#{planId}, #{planDayDTO.title}, #{planDayDTO.travelDate}, #{userId})
	</insert>

	<insert id="insertPlanDayCards">
		INSERT INTO plan_day_cards (plan_day_id, seq, card_id)
		VALUES
		<foreach collection="planDayDTO.planDayCardList" index="idx" item="card" separator=",">
			(#{planDayDTO.planDayId}, ${idx} + 1, #{card})
		</foreach>
	</insert>

	<insert id="insertPlanDayBridges">
		INSERT INTO plan_day_bridges (plan_day_id, seq, memo)
		VALUES
		<foreach collection="planDayDTO.planDayBridgeList" index="idx" item="bridge" separator=",">
			(#{planDayDTO.planDayId}, ${idx} + 1, #{bridge.memo})
		</foreach>
	</insert>

	<select id="selectPlanOne" resultType="com.junebay.plancard.plan.dto.BasicPlanDTO">
		SELECT	id AS planId
				, title
				, start_date
				, end_date
		     	/* MyBatis의 조회값 세팅 기준은 자바빈에서 설정한 Setter가 아니라 조회값을 주입하는 형식이기 때문에 여기서 계산해서 넣어주어야함 */
				, DATEDIFF(end_date, start_date) + 1 AS duration
		FROM	plans p
		WHERE	id = #{planId}
	</select>

	<select id="selectAllExplorePlanCount" resultType="java.lang.Integer">
		WITH pci AS (
		<include refid="explorePlanCte" />
		)

		SELECT	COUNT(*)
		FROM	(
		SELECT	DISTINCT
				pci.plan_id
				, pci.visibility
				, pci.title
				, pci.like_count
				, CASE WHEN ps.plan_id IS NULL THEN false ELSE true END AS scrap
				, CASE WHEN pl.plan_id IS NULL THEN false ELSE true END AS "like"
				, pci.start_date
				, pci.end_date
				, pci.author
				, pci.created_date
				, pci.updated_date
				, pci.duration
		FROM	pci
				LEFT JOIN plan_scraps ps ON ps.plan_id = pci.plan_id AND ps.user_id = 2
				LEFT JOIN plan_likes pl ON pl.plan_id = pci.plan_id
		WHERE	1=1
				<if test='searchDTO.filter != null
					and (
						searchDTO.filter.country != null and !"".equals(searchDTO.filter.country)
						or searchDTO.filter.city != null and !"".equals(searchDTO.filter.city)
						or searchDTO.filter.category != null and searchDTO.filter.category.size() > 0
						or searchDTO.filter.theme != null and searchDTO.filter.theme.size() > 0
					)'>
			    AND pci.plan_id IN (
						SELECT plan_id
						FROM pci
						GROUP BY plan_id
						HAVING TRUE
							<include refid="filterConditionForCountry" />
							<include refid="filterConditionForCity" />
							<include refid="filterConditionForCategory" />
							<include refid="filterConditionForTheme" />
					)
				</if>
		    <include refid="filterConditionForScrap" />
		    <include refid="filterConditionForLike" />
		) Z
	</select>

	<select id="selectExplorePlanList" resultMap="explorePlanDTOResultMap">
		WITH pci AS (
		<include refid="explorePlanCte" />
		)

		SELECT	DISTINCT
				pci.plan_id
				, pci.visibility
				, pci.title
				, pci.like_count
				, CASE WHEN ps.plan_id IS NULL THEN false ELSE true END AS scrap
				, CASE WHEN pl.plan_id IS NULL THEN false ELSE true END AS "like"
				, pci.start_date
				, pci.end_date
				, pci.author
				, pci.created_date
				, pci.updated_date
				, pci.duration
		FROM	pci
				LEFT JOIN plan_scraps ps ON ps.plan_id = pci.plan_id AND ps.user_id = 2
				LEFT JOIN plan_likes pl ON pl.plan_id = pci.plan_id
		WHERE	1=1
				<if test='searchDTO.filter != null
					and (
						searchDTO.filter.country != null and !"".equals(searchDTO.filter.country)
						or searchDTO.filter.city != null and !"".equals(searchDTO.filter.city)
						or searchDTO.filter.category != null and searchDTO.filter.category.size() > 0
						or searchDTO.filter.theme != null and searchDTO.filter.theme.size() > 0
					)'>
			    AND pci.plan_id IN (
						SELECT plan_id
						FROM pci
						GROUP BY plan_id
						HAVING TRUE
							<include refid="filterConditionForCountry" />
							<include refid="filterConditionForCity" />
							<include refid="filterConditionForCategory" />
							<include refid="filterConditionForTheme" />
					)
				</if>
		    <include refid="filterConditionForScrap" />
		    <include refid="filterConditionForLike" />

			<include refid="common.sortCondition" />
			<include refid="common.paginationCondition" />
	</select>

	<select id="selectAllMyPlanCount" resultType="java.lang.Integer">
		SELECT	COUNT(*)
		FROM	(
			SELECT	p.id AS plan_id
					, p.visibility
			        , p.title
			        , p.like_count
			        , CASE WHEN ps.plan_id IS NULL THEN false ELSE true END AS scrap
			     	, p.start_date
			     	, p.end_date
					, u.name AS author
			        , p.created_date
			        , p.updated_date
			        , DATEDIFF(end_date, start_date) + 1 AS duration
			FROM 	plans p
					LEFT OUTER JOIN plan_scraps ps
						ON p.id = ps.plan_id AND ps.user_id = #{userId}
					INNER JOIN users u
						ON u.id = p.user_id AND u.is_active = true
			WHERE	p.user_id = #{userId}
					<include refid="searchCondition" />
					<include refid="filterConditionForScrap" />
		) Z
	</select>

	<select id="selectMyPlanList" resultMap="myPlanDTOResultMap">
		SELECT	p.id AS plan_id
				, p.visibility
		        , p.title
		        , p.like_count
		        , CASE WHEN ps.plan_id IS NULL THEN false ELSE true END AS scrap
				, p.start_date
		        , p.end_date
		        , u.name AS author
		        , p.created_date
		        , p.updated_date
		        , DATEDIFF(end_date, start_date) + 1 AS duration
		FROM 	plans p
				LEFT OUTER JOIN plan_scraps ps
					ON p.id = ps.plan_id AND ps.user_id = #{userId}
				INNER JOIN users u
					ON u.id = p.user_id AND u.is_active = true
		WHERE	p.user_id = #{userId}
				<include refid="searchCondition" />
				<include refid="filterConditionForScrap" />
				<include refid="common.sortCondition" />
				<include refid="common.paginationCondition" />
	</select>

	<select id="selectThumbnailCardListByPlanId" resultType="com.junebay.plancard.card.dto.ThumbnailCardDTO">
		SELECT	r.card_id
		     	, r.title
		     	, r.description
		     	, ct.name AS city
				, co.name AS country
				, cg.name AS category
				, r.rating
				, r.image_url
				, r.scrap
			    , r.image_id
	            , ci.alt
		FROM (
			SELECT	pdc.card_id
					, c.title
					, c.description
					, c.city_id
					, c.category_id
					, c.rating
					, CONCAT('/images/cards/', c.main_image_id) AS image_url
					, CASE WHEN cs.card_id IS NULL THEN false ELSE true END AS scrap
					, c.main_image_id AS image_id
			FROM	plans p
					INNER JOIN plan_days pd
						ON p.id = pd.plan_id
					INNER JOIN plan_day_cards pdc
						ON pd.id = pdc.plan_day_id
					INNER JOIN cards c
						ON pdc.card_id = c.id AND c.is_active = true
					LEFT OUTER JOIN card_scraps cs
					    ON pdc.card_id = cs.card_id AND cs.user_id = p.user_id
			WHERE	p.id = #{planId}
		) r
		INNER JOIN cities ct
			ON ct.id = r.city_id AND ct.is_active = true
		INNER JOIN countries co
			ON co.id = ct.country_id AND co.is_active = true
		INNER JOIN categories cg
			ON cg.id = r.category_id AND cg.is_active = true
		INNER JOIN card_images ci
			ON ci.id = r.image_id
	</select>

	<select id="selectCategoryListByPlanId" resultType="com.junebay.plancard.plan.dto.ExplorePlanTagDTO">
		SELECT	distinct cg.id AS tagId
		        , cg.name AS tagName
				, false AS isTheme
		FROM	plans p
				INNER JOIN plan_days pd
					ON p.id = pd.plan_id
				INNER JOIN plan_day_cards pdc
					ON pd.id = pdc.plan_day_id
				INNER JOIN cards c
					ON pdc.card_id = c.id
				INNER JOIN categories cg
					ON cg.id = c.category_id
		WHERE	p.id = #{planId}
				AND p.visibility = 'public'
		        AND c.is_active = true
		        AND cg.is_active = true
		ORDER BY cg.id ASC
	</select>

	<select id="selectThemeListByPlanId" resultType="com.junebay.plancard.plan.dto.ExplorePlanTagDTO">
		SELECT	DISTINCT t.id AS tagId
				, t.name AS tagName
		        , true AS isTheme
		FROM	plans p
				INNER JOIN plan_days pd
					ON p.id = pd.plan_id
				INNER JOIN plan_day_cards pdc
					ON pd.id = pdc.plan_day_id
				INNER JOIN cards c
					ON pdc.card_id = c.id
				INNER JOIN card_theme ct
					ON ct.card_id = c.id
				INNER JOIN themes t
					ON t.id = ct.theme_id
		WHERE	p.id = #{planId}
				AND p.visibility = 'public'
				AND c.is_active = true
		  		AND t.is_active = true
		ORDER BY t.id ASC
	</select>


</mapper>